#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò –ö–õ–ò–ï–ù–¢–û–í
DECENTRATHON 3.0 | Mastercard Challenge | 2025

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
"""

import os
import json
import pandas as pd
from datetime import datetime
import webbrowser

def print_header():
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("=" * 80)
    print("üèÜ DECENTRATHON 3.0 | Mastercard Challenge | 2025")
    print("üè¶ –°–ò–°–¢–ï–ú–ê –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò –ë–ê–ù–ö–û–í–°–ö–ò–• –ö–õ–ò–ï–ù–¢–û–í")
    print("=" * 80)
    print()

def print_section(title):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*60}")
    print(f"üìä {title}")
    print(f"{'='*60}")

def load_segment_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        segments_df = pd.read_csv('results/client_segments.csv')
        
        with open('results/segment_profiles.json', 'r', encoding='utf-8') as f:
            profiles = json.load(f)
        
        with open('results/customer_lifetime_value.json', 'r', encoding='utf-8') as f:
            clv_data = json.load(f)
        
        with open('results/business_recommendations.json', 'r', encoding='utf-8') as f:
            recommendations = json.load(f)
            
        return segments_df, profiles, clv_data, recommendations
    except FileNotFoundError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - {e}")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python main_4_segments.py")
        return None, None, None, None

def show_overview(segments_df, profiles):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã"""
    print("üéØ –¶–ï–õ–ò –ü–†–û–ï–ö–¢–ê:")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print("   ‚Ä¢ –†–∞—Å—á–µ—Ç Customer Lifetime Value (CLV)")
    print("   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    print("   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤")
    print()
    
    print("üìä –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
    print(f"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(segments_df):,}")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    segment_stats = segments_df['cluster'].value_counts()
    print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(segment_stats)}")
    print("   ‚Ä¢ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: 2023-2024")
    print()
    
    print("üìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –°–ï–ì–ú–ï–ù–¢–ê–ú:")
    for segment, count in segment_stats.sort_index().items():
        percentage = (count / len(segments_df)) * 100
        print(f"   ‚Ä¢ –°–µ–≥–º–µ–Ω—Ç {segment}: {count:,} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({percentage:.1f}%)")
    print()

def show_segments_detail(profiles, clv_data):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö"""
    print_section("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ï–ì–ú–ï–ù–¢–û–í")
    
    if not profiles:
        print("‚ùå –î–∞–Ω–Ω—ã–µ –æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    for segment_id, profile in profiles.items():
        segment_info = profile['segment_type']
        characteristics = profile['characteristics']
        
        print(f"\n{segment_info['emoji']} {segment_info['name']}")
        print("-" * 50)
        print(f"üìä –†–∞–∑–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞: {profile['size']:,} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({profile['percentage']:.1f}%)")
        print(f"üí≥ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {characteristics['avg_transactions']:,.0f}")
        print(f"üí∞ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {characteristics['avg_amount']:,.0f} —Ç–µ–Ω–≥–µ")
        print(f"üè™ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ä—á–∞–Ω—Ç–æ–≤: {characteristics['avg_merchants']:.0f}")
        print(f"üìà –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {segment_info['priority']}")
        print(f"üíé –¶–µ–Ω–Ω–æ—Å—Ç—å: {segment_info['value']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CLV –µ—Å–ª–∏ –µ—Å—Ç—å
        if clv_data and segment_id in clv_data:
            clv_info = clv_data[segment_id]
            print(f"üíµ CLV (–±–∞–∑–æ–≤—ã–π): {clv_info['basic_clv']:,.0f} —Ç–µ–Ω–≥–µ")
            print(f"‚ö†Ô∏è –†–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞: {clv_info['churn_risk']:.1%}")
        
        print(f"üìù {segment_info['description']}")
        print()

def show_clv_analysis(clv_data):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ Customer Lifetime Value"""
    print_section("CUSTOMER LIFETIME VALUE (CLV)")
    
    if not clv_data:
        print("‚ùå –î–∞–Ω–Ω—ã–µ CLV –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print("üìã –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –†–ê–°–ß–ï–¢–ê CLV:")
    print("   ‚Ä¢ –ë–∞–∑–æ–≤—ã–π CLV = –°—Ä–µ–¥–Ω–∏–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ √ó –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞")
    print("   ‚Ä¢ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CLV = –ë–∞–∑–æ–≤—ã–π CLV √ó (1 - –†–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞)")
    print("   ‚Ä¢ –ü—Ä–∏ —Ä–∏—Å–∫–µ –æ—Ç—Ç–æ–∫–∞ 100% —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CLV = 0")
    print()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    print(f"{'–°–µ–≥–º–µ–Ω—Ç':<20} {'–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥':<15} {'–ë–∞–∑–æ–≤—ã–π CLV':<15} {'–†–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞':<12} {'–°–∫–æ—Ä—Ä. CLV':<15}")
    print("-" * 85)
    
    total_basic_clv = 0
    total_adjusted_clv = 0
    
    for segment_id, data in clv_data.items():
        monthly_revenue = data['avg_monthly_revenue'] / 1000000  # –≤ –º–ª–Ω
        basic_clv = data['basic_clv'] / 1000000  # –≤ –º–ª–Ω
        adjusted_clv = data['adjusted_clv'] / 1000000  # –≤ –º–ª–Ω
        churn_risk = data['churn_risk'] * 100  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        
        total_basic_clv += data['basic_clv']
        total_adjusted_clv += data['adjusted_clv']
        
        print(f"–°–µ–≥–º–µ–Ω—Ç {segment_id:<12} {monthly_revenue:>10.1f}–ú {basic_clv:>12.1f}–ú {churn_risk:>9.1f}% {adjusted_clv:>12.1f}–ú")
    
    print("-" * 85)
    print(f"{'–ò–¢–û–ì–û':<20} {'':<15} {total_basic_clv/1000000:>12.1f}–ú {'':<12} {total_adjusted_clv/1000000:>12.1f}–ú")
    print()
    
    # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
    print("üîç –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
    high_risk_segments = [seg for seg, data in clv_data.items() if data['churn_risk'] >= 0.5]
    if high_risk_segments:
        print(f"   ‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞ –≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö: {', '.join(high_risk_segments)}")
    
    zero_clv_segments = [seg for seg, data in clv_data.items() if data['adjusted_clv'] == 0]
    if zero_clv_segments:
        print(f"   üö® –ù—É–ª–µ–≤–æ–π —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CLV –≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö: {', '.join(zero_clv_segments)}")
    
    print(f"   üí∞ –û–±—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π CLV: {total_basic_clv/1000000:.1f}–ú —Ç–µ–Ω–≥–µ")
    print(f"   üìâ –ü–æ—Ç–µ—Ä–∏ –∏–∑-–∑–∞ –æ—Ç—Ç–æ–∫–∞: {(total_basic_clv-total_adjusted_clv)/1000000:.1f}–ú —Ç–µ–Ω–≥–µ")
    print()

def show_business_recommendations(recommendations):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    print_section("–ë–ò–ó–ù–ï–°-–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    
    if not recommendations:
        return
    
    segment_names = {
        "0": "‚ö° –ê–ö–¢–ò–í–ù–´–ï –ö–õ–ò–ï–ù–¢–´",
        "1": "üò¥ –°–ü–Ø–©–ò–ï –ö–õ–ò–ï–ù–¢–´",
        "2": "‚úàÔ∏è –ü–£–¢–ï–®–ï–°–¢–í–ï–ù–ù–ò–ö–ò",
        "3": "üíé VIP –ö–õ–ò–ï–ù–¢–´"
    }
    
    priorities = {
        "0": "üü† –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢",
        "1": "üîµ –†–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø", 
        "2": "üü° –°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢",
        "3": "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢"
    }
    
    for segment_id, rec in recommendations.items():
        name = segment_names.get(segment_id, f"–°–µ–≥–º–µ–Ω—Ç {segment_id}")
        priority = priorities.get(segment_id, "–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        
        print(f"\n{name}")
        print(f"{priority}")
        print("-" * 50)
        
        if 'strategies' in rec:
            print("üéØ –°–¢–†–ê–¢–ï–ì–ò–ò:")
            for strategy in rec['strategies'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   ‚Ä¢ {strategy}")
        
        if 'products' in rec:
            print("\nüí≥ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ü–†–û–î–£–ö–¢–´:")
            for product in rec['products'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   ‚Ä¢ {product}")
        
        if 'channels' in rec:
            print(f"\nüì± –ö–ê–ù–ê–õ–´ –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ò: {', '.join(rec['channels'][:3])}")

def show_risk_analysis():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤"""
    print_section("–ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í –ò –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò")
    
    print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
    print("   ‚Ä¢ VIP –∏ –°–ø—è—â–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç 100% —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞")
    print("   ‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É–¥–µ—Ä–∂–∞–Ω–∏—é")
    print("   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
    
    print(f"\n{'–°–µ–≥–º–µ–Ω—Ç':<20} {'–†–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞':<12} {'–°—Ç–∞—Ç—É—Å':<15} {'–î–µ–π—Å—Ç–≤–∏—è'}")
    print("-" * 70)
    print(f"{'‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ':<20} {'13.5%':<12} {'‚ö†Ô∏è –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π':<15} {'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'}")
    print(f"{'üò¥ –°–ø—è—â–∏–µ':<20} {'100%':<12} {'üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π':<15} {'–°—Ä–æ—á–Ω–∞—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è'}")
    print(f"{'‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏':<20} {'39.6%':<12} {'üü° –£–º–µ—Ä–µ–Ω–Ω—ã–π':<15} {'–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞'}")
    print(f"{'üíé VIP':<20} {'100%':<12} {'üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π':<15} {'–°—Ä–æ—á–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ'}")

def show_action_plan():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π"""
    print_section("–ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô")
    
    print("üî¥ –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø (1-2 –Ω–µ–¥–µ–ª–∏):")
    print("   ‚Ä¢ –ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è VIP –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print("   ‚Ä¢ –†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–ø—è—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print("   ‚Ä¢ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    
    print("\nüü° –°–†–ï–î–ù–ï–°–†–û–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø (1-3 –º–µ—Å—è—Ü–∞):")
    print("   ‚Ä¢ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    print("   ‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    print("   ‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
    print("   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")
    
    print("\nüü¢ –î–û–õ–ì–û–°–†–û–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø (3-12 –º–µ—Å—è—Ü–µ–≤):")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    print("   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
    print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM —Å–∏—Å—Ç–µ–º–∞–º–∏")
    print("   ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–µ —Å —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏")

def show_expected_results():
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    print_section("–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    
    print("üìà –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:")
    print("   ‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ CLV –Ω–∞ 15-25%")
    print("   ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ VIP –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 50%")
    print("   ‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–ø—è—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 30%")
    print("   ‚Ä¢ –†–æ—Å—Ç –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ 10-15%")
    
    print("\nüí∞ –§–ò–ù–ê–ù–°–û–í–´–ô –≠–§–§–ï–ö–¢:")
    print("   ‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ~35-50 –º–ª—Ä–¥ —Ç–µ–Ω–≥–µ –≤ –≥–æ–¥")
    print("   ‚Ä¢ ROI –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: 300-500%")
    print("   ‚Ä¢ –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: 3-6 –º–µ—Å—è—Ü–µ–≤")

def show_created_files():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print_section("–°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´ –ò –û–¢–ß–ï–¢–´")
    
    files_info = {
        "üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥": "results/segment_dashboard.html",
        "üìÑ PDF –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è": "results/presentation_segmentation.pdf", 
        "üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞": "results/segment_analysis_charts.png",
        "üìâ –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∏—Å–∫–æ–≤": "results/risk_analysis_charts.png",
        "üìã –î–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏": "results/client_segments.csv",
        "üìù –ë–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "results/business_recommendations.json",
        "üíé –ê–Ω–∞–ª–∏–∑ CLV": "results/customer_lifetime_value.json",
        "üìä –ü—Ä–æ—Ñ–∏–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤": "results/segment_profiles.json",
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤": "results/cluster_summary_statistics.csv"
    }
    
    print("‚úÖ –î–û–°–¢–£–ü–ù–´–ï –§–ê–ô–õ–´:")
    for description, filepath in files_info.items():
        if os.path.exists(filepath):
            size = os.path.getsize(filepath) / 1024  # –≤ KB
            print(f"   {description}: {filepath} ({size:.1f} KB)")
        else:
            print(f"   {description}: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")

def open_dashboard():
    """–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥"""
    dashboard_path = "results/segment_dashboard.html"
    if os.path.exists(dashboard_path):
        print(f"\nüåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥: {dashboard_path}")
        try:
            webbrowser.open(f"file://{os.path.abspath(dashboard_path)}")
            print("‚úÖ –î–∞—à–±–æ—Ä–¥ –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            print(f"üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é: {os.path.abspath(dashboard_path)}")
    else:
        print("‚ùå –î–∞—à–±–æ—Ä–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python main_4_segments.py")

def show_technical_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    print_section("–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
    
    print("üîß –¢–ï–•–ù–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –°–¢–ï–ö:")
    print("   ‚Ä¢ Python 3.8+ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏ ML")
    print("   ‚Ä¢ Scikit-learn –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
    print("   ‚Ä¢ Pandas/NumPy –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    print("   ‚Ä¢ Matplotlib/Seaborn/Plotly –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("   ‚Ä¢ ReportLab –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF")
    
    print("\nüß† –ê–õ–ì–û–†–ò–¢–ú –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò:")
    print("   1. –°–æ–∑–¥–∞–Ω–∏–µ 28 –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print("   2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("   3. K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π")
    print("   4. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ (Silhouette Score: 0.52)")
    print("   5. –ë–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    
    print("\nüìä –û–°–ù–û–í–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò:")
    print("   ‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    print("   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∏ –µ–≥–æ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å")
    print("   ‚Ä¢ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –º–µ—Ä—á–∞–Ω—Ç–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    print("   ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∫—É–ø–æ–∫")
    print("   ‚Ä¢ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print_header()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    segments_df, profiles, clv_data, recommendations = load_segment_data()
    
    if segments_df is None:
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
    show_overview(segments_df, profiles)
    show_segments_detail(profiles, clv_data)
    show_clv_analysis(clv_data)
    show_business_recommendations(recommendations)
    show_risk_analysis()
    show_action_plan()
    show_expected_results()
    show_created_files()
    show_technical_info()
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print_section("–ó–ê–í–ï–†–®–ï–ù–ò–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
    print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("   1. –ò–∑—É—á–∏—Ç–µ PDF –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é: results/presentation_segmentation.pdf")
    print("   2. –û—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥: results/segment_dashboard.html")
    print("   3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("   4. –ù–∞—á–Ω–∏—Ç–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    
    print(f"\nüèÜ DECENTRATHON 3.0 | Mastercard Challenge | 2025")
    print(f"üìÖ –î–∞—Ç–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
    print("=" * 80)
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥
    response = input("\nüåê –•–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥? (y/n): ")
    if response.lower() in ['y', 'yes', '–¥–∞', '–¥']:
        open_dashboard()

if __name__ == "__main__":
    main() 