"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞–Ω–∫–∞
"""

import os
from dataclasses import dataclass
from typing import List, Dict, Any

@dataclass
class DataConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    data_file: str = 'DECENTRATHON_3.0.parquet'
    output_dir: str = 'results'
    
@dataclass
class FeatureConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    
    clustering_features: List[str] = None
    
    
    categorical_features: List[str] = None
    
    
    time_features: List[str] = None
    
    def __post_init__(self):
        if self.clustering_features is None:
            self.clustering_features = [
                'total_transactions', 'total_amount', 'avg_amount', 'median_amount',
                'std_amount', 'amount_range', 'unique_merchants', 'unique_categories',
                'unique_cities', 'purchase_ratio', 'avg_merchants_per_transaction',
                'spending_consistency', 'preferred_hour', 'preferred_day',
                # –ù–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                'high_value_transactions_ratio', 'travel_indicator', 'premium_merchant_ratio',
                'weekend_activity_ratio', 'evening_activity_ratio'
            ]
        
        if self.categorical_features is None:
            self.categorical_features = [
                'preferred_pos_mode', 'preferred_wallet', 'activity_level', 'spending_level',
                'client_tier', 'travel_pattern'
            ]
            
        if self.time_features is None:
            self.time_features = [
                'hour', 'day_of_week', 'month', 'preferred_hour', 'preferred_day'
            ]

@dataclass
class ModelConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
    
    max_clusters: int = 15
    target_clusters: int = 4  # –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    random_state: int = 42
    n_init: int = 20  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ª—É—á—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    
    
    outlier_contamination: float = 0.05
    
    
    pca_components: int = 2
    
@dataclass
class VisualizationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    figure_size: tuple = (15, 10)
    dpi: int = 300
    style: str = 'seaborn-v0_8'
    color_palette: str = 'husl'
    
    
    interactive_plot: str = 'cluster_analysis.html'
    static_plot: str = 'cluster_analysis_static.png'
    optimization_plot: str = 'cluster_optimization.png'

@dataclass
class OutputConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    segments_file: str = 'client_segments.csv'
    summary_file: str = 'cluster_summary_statistics.csv'
    detailed_report: str = 'segmentation_report.html'
    business_recommendations: str = 'business_recommendations.md'

@dataclass
class SegmentConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤"""
    segment_definitions: Dict[str, Dict[str, Any]] = None
    
    def __post_init__(self):
        if self.segment_definitions is None:
            self.segment_definitions = {
                'regular': {
                    'name': 'üîÑ –û–±—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
                    'emoji': 'üîÑ',
                    'description': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã',
                    'priority': '–°—Ä–µ–¥–Ω–∏–π',
                    'color': '#3498db'
                },
                'sleeping': {
                    'name': 'üò¥ –°–ø—è—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã', 
                    'emoji': 'üò¥',
                    'description': '–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ç—Ä–µ–±—É—é—Ç —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏',
                    'priority': '–í—ã—Å–æ–∫–∏–π',
                    'color': '#95a5a6'
                },
                'vip': {
                    'name': 'üíé VIP –∫–ª–∏–µ–Ω—Ç—ã',
                    'emoji': 'üíé', 
                    'description': '–í—ã—Å–æ–∫–∏–µ —Ç—Ä–∞—Ç—ã, –ø—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç',
                    'priority': '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π',
                    'color': '#f39c12'
                },
                'traveler': {
                    'name': '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏',
                    'emoji': '‚úàÔ∏è',
                    'description': '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö',
                    'priority': '–í—ã—Å–æ–∫–∏–π', 
                    'color': '#e74c3c'
                }
            }

class Config:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.data = DataConfig()
        self.features = FeatureConfig()
        self.model = ModelConfig()
        self.visualization = VisualizationConfig()
        self.output = OutputConfig()
        self.segments = SegmentConfig()
        
        
        os.makedirs(self.data.output_dir, exist_ok=True)
    
    def get_output_path(self, filename: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É"""
        return os.path.join(self.data.output_dir, filename)


config = Config() 