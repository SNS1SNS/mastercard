#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .parquet
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
import json

def demo_parquet_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ .parquet —Ñ–∞–π–ª–∞"""
    
    print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –° –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò (.parquet)")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä 1. –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•")
    df = pd.read_parquet('results/customer_segmentation_results.parquet')
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π —Å {len(df.columns)} –∫–æ–ª–æ–Ω–∫–∞–º–∏")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    with open('results/customer_segmentation_metadata.json', 'r', encoding='utf-8') as f:
        metadata = json.load(f)
    
    print(f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {metadata['dataset_info']['analysis_date']}")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {metadata['dataset_info']['model_used']}")
    print(f"üìà –ö–∞—á–µ—Å—Ç–≤–æ: {metadata['dataset_info']['silhouette_score']}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("\nüìã 2. –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•")
    print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {metadata['file_info']['file_size_mb']} MB")
    print(f"–§–æ—Ä–º–∞—Ç: {metadata['file_info']['format']}")
    print(f"–°–∂–∞—Ç–∏–µ: {metadata['file_info']['compression']}")
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
    print("\nüëÄ 3. –ü–ï–†–í–´–ï 3 –ó–ê–ü–ò–°–ò")
    display_columns = ['card_id', 'segment_name', 'total_transactions', 'total_amount', 'avg_amount']
    print(df[display_columns].head(3).to_string(index=False))
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    print("\nüìä 4. –ê–ù–ê–õ–ò–ó –ü–û –°–ï–ì–ú–ï–ù–¢–ê–ú")
    segment_analysis = df.groupby('segment_name').agg({
        'card_id': 'count',
        'total_transactions': ['mean', 'median'],
        'total_amount': ['mean', 'median'],
        'avg_amount': ['mean', 'median'],
        'unique_merchants': 'mean',
        'unique_categories': 'mean'
    }).round(2)
    
    print(segment_analysis)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    print("\nüìà 5. –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
    
    print("\nüî∏ –ü–æ –æ–±—ä–µ–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
    transaction_dist = df['transaction_volume_category'].value_counts()
    for category, count in transaction_dist.items():
        percentage = (count / len(df)) * 100
        print(f"   {category}: {count:,} ({percentage:.1f}%)")
    
    print("\nüî∏ –ü–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:")
    revenue_dist = df['revenue_category'].value_counts()
    for category, count in revenue_dist.items():
        percentage = (count / len(df)) * 100
        print(f"   {category}: {count:,} ({percentage:.1f}%)")
    
    print("\nüî∏ –ü–æ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É:")
    ticket_dist = df['avg_ticket_category'].value_counts()
    for category, count in ticket_dist.items():
        percentage = (count / len(df)) * 100
        print(f"   {category}: {count:,} ({percentage:.1f}%)")
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    print("\nüïê 6. –í–†–ï–ú–ï–ù–ù–´–ï –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø")
    
    print("\nüî∏ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —á–∞—Å—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
    hour_dist = df['preferred_hour'].value_counts().head(5)
    for hour, count in hour_dist.items():
        percentage = (count / len(df)) * 100
        print(f"   {hour:02d}:00 - {count:,} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({percentage:.1f}%)")
    
    print("\nüî∏ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:")
    day_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    day_dist = df['preferred_day'].value_counts()
    for day, count in day_dist.items():
        percentage = (count / len(df)) * 100
        day_name = day_names[day] if day < len(day_names) else f"–î–µ–Ω—å {day}"
        print(f"   {day_name}: {count:,} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({percentage:.1f}%)")
    
    # –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    print("\nüí≥ 7. –ü–†–ï–î–ü–û–ß–ò–¢–ê–ï–ú–´–ï –°–ü–û–°–û–ë–´ –û–ü–õ–ê–¢–´")
    
    print("\nüî∏ POS —Ä–µ–∂–∏–º—ã:")
    pos_dist = df['preferred_pos_mode'].value_counts().head(5)
    for pos_mode, count in pos_dist.items():
        percentage = (count / len(df)) * 100
        print(f"   {pos_mode}: {count:,} ({percentage:.1f}%)")
    
    print("\nüî∏ –ö–æ—à–µ–ª—å–∫–∏:")
    wallet_dist = df['preferred_wallet'].value_counts().head(5)
    for wallet, count in wallet_dist.items():
        percentage = (count / len(df)) * 100
        print(f"   {wallet}: {count:,} ({percentage:.1f}%)")
    
    # –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    print("\nüèÜ 8. –¢–û–ü-3 –ö–õ–ò–ï–ù–¢–ê –ü–û –°–ï–ì–ú–ï–ù–¢–ê–ú")
    
    for segment in df['segment_name'].unique():
        segment_data = df[df['segment_name'] == segment]
        top_clients = segment_data.nlargest(3, 'total_amount')[['card_id', 'total_transactions', 'total_amount', 'avg_amount']]
        
        print(f"\nüî∏ {segment}:")
        for _, client in top_clients.iterrows():
            print(f"   ID: {client['card_id']} | "
                  f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {client['total_transactions']:,} | "
                  f"–û–±–æ—Ä–æ—Ç: {client['total_amount']:,.0f}‚Ç∏ | "
                  f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {client['avg_amount']:,.0f}‚Ç∏")
    
    # –°–≤–æ–¥–∫–∞
    print("\nüìã 9. –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê")
    print(f"‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(df):,} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print(f"‚úÖ –í—ã—è–≤–ª–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {df['segment_name'].nunique()}")
    print(f"‚úÖ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {df['total_amount'].sum():,.0f} —Ç–µ–Ω–≥–µ")
    print(f"‚úÖ –°—Ä–µ–¥–Ω–∏–π –æ–±–æ—Ä–æ—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {df['total_amount'].mean():,.0f} —Ç–µ–Ω–≥–µ")
    print(f"‚úÖ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {df['avg_amount'].mean():,.0f} —Ç–µ–Ω–≥–µ")
    
    print("\nüéØ –ì–û–¢–û–í–û! –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ .parquet —Ñ–∞–π–ª–∞")
    print("üìÇ –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ª—é–±—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö")

if __name__ == "__main__":
    try:
        demo_parquet_analysis()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª customer_segmentation_results.parquet —Å—É—â–µ—Å—Ç–≤—É–µ—Ç") 