"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–∏—Å—Ç–µ–º—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
"""

import pandas as pd
import json
import os
from datetime import datetime

def print_header(title):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("\n" + "="*60)
    print(f"üéØ {title}")
    print("="*60)

def print_section(title):
    """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print(f"\nüìä {title}")
    print("-" * 40)

def load_segmentation_results():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print_header("–ó–ê–ì–†–£–ó–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    files_to_check = [
        'results/client_segments.csv',
        'results/segment_profiles.json',
        'results/business_recommendations.json',
        'results/cluster_summary_statistics.csv'
    ]
    
    missing_files = []
    for file_path in files_to_check:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for file in missing_files:
            print(f"   ‚Ä¢ {file}")
        print("\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python main_4_segments.py")
        return None, None, None, None
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞...")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    df_segments = pd.read_csv('results/client_segments.csv')
    print(f"   üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_segments):,} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    # –ü—Ä–æ—Ñ–∏–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    with open('results/segment_profiles.json', 'r', encoding='utf-8') as f:
        segment_profiles = json.load(f)
    print(f"   üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(segment_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    
    # –ë–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    with open('results/business_recommendations.json', 'r', encoding='utf-8') as f:
        recommendations = json.load(f)
    print(f"   üíº –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è {len(recommendations)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    df_stats = pd.read_csv('results/cluster_summary_statistics.csv')
    print(f"   üìà –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {len(df_stats)} –∫–ª–∞—Å—Ç–µ—Ä–∞–º")
    
    return df_segments, segment_profiles, recommendations, df_stats

def show_segment_overview(df_segments, segment_profiles):
    """–û–±–∑–æ—Ä —Å–µ–≥–º–µ–Ω—Ç–æ–≤"""
    print_header("–û–ë–ó–û–† –°–ï–ì–ú–ï–ù–¢–û–í –ö–õ–ò–ï–ù–¢–û–í")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    segment_counts = df_segments['segment_type'].value_counts()
    total_clients = len(df_segments)
    
    print_section("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
    for segment, count in segment_counts.items():
        percentage = (count / total_clients) * 100
        print(f"   {segment}: {count:,} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({percentage:.1f}%)")
    
    print_section("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    for segment_name, profile in segment_profiles.items():
        print(f"\nüéØ {segment_name}")
        print(f"   üìä –†–∞–∑–º–µ—Ä: {profile['size']:,} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({profile['percentage']:.1f}%)")
        print(f"   üí∞ –°—Ä–µ–¥–Ω–∏–π –æ–±–æ—Ä–æ—Ç: {profile['avg_total_amount']:,.0f} —Ç–µ–Ω–≥–µ")
        print(f"   üîÑ –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {profile['avg_total_transactions']:.0f}")
        print(f"   üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {profile['avg_avg_amount']:,.0f} —Ç–µ–Ω–≥–µ")
        print(f"   üè™ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ä—á–∞–Ω—Ç–æ–≤: {profile['avg_unique_merchants']:.0f}")

def show_financial_analysis(df_segments):
    """–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"""
    print_header("–§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    financial_stats = df_segments.groupby('segment_type').agg({
        'total_amount': ['sum', 'mean', 'median'],
        'total_transactions': ['sum', 'mean'],
        'avg_amount': 'mean',
        'card_id': 'count'
    }).round(0)
    
    print_section("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
    
    total_revenue = df_segments['total_amount'].sum()
    total_transactions = df_segments['total_transactions'].sum()
    
    print(f"üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {total_revenue:,.0f} —Ç–µ–Ω–≥–µ")
    print(f"üîÑ –û–±—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {total_transactions:,.0f}")
    print(f"üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –±–∞–Ω–∫—É: {total_revenue/total_transactions:,.0f} —Ç–µ–Ω–≥–µ")
    
    print("\nüìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º:")
    for segment in df_segments['segment_type'].unique():
        segment_data = df_segments[df_segments['segment_type'] == segment]
        
        segment_revenue = segment_data['total_amount'].sum()
        segment_transactions = segment_data['total_transactions'].sum()
        revenue_share = (segment_revenue / total_revenue) * 100
        
        print(f"\n   {segment}:")
        print(f"      üí∞ –û–±–æ—Ä–æ—Ç: {segment_revenue:,.0f} —Ç–µ–Ω–≥–µ ({revenue_share:.1f}%)")
        print(f"      üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {segment_transactions:,.0f}")
        print(f"      üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {segment_revenue/segment_transactions:,.0f} —Ç–µ–Ω–≥–µ")
        print(f"      üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {len(segment_data):,}")

def show_behavioral_patterns(df_segments):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print_header("–ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –ü–ê–¢–¢–ï–†–ù–´")
    
    print_section("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º
    hour_analysis = df_segments.groupby('segment_type')['preferred_hour'].agg(['mean', 'mode']).round(1)
    print("‚è∞ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —á–∞—Å—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
    for segment in hour_analysis.index:
        mean_hour = hour_analysis.loc[segment, 'mean']
        print(f"   {segment}: {mean_hour:.1f} —á–∞—Å")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    day_analysis = df_segments.groupby('segment_type')['preferred_day'].agg(['mean', 'mode']).round(1)
    days_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    
    print("\nüìÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:")
    for segment in day_analysis.index:
        mean_day = int(day_analysis.loc[segment, 'mean'])
        day_name = days_names[mean_day] if mean_day < 7 else "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        print(f"   {segment}: {day_name}")
    
    print_section("–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    diversity_stats = df_segments.groupby('segment_type').agg({
        'unique_merchants': 'mean',
        'unique_categories': 'mean',
        'unique_cities': 'mean'
    }).round(1)
    
    for segment in diversity_stats.index:
        print(f"\n   {segment}:")
        print(f"      üè™ –ú–µ—Ä—á–∞–Ω—Ç–æ–≤: {diversity_stats.loc[segment, 'unique_merchants']:.0f}")
        print(f"      üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {diversity_stats.loc[segment, 'unique_categories']:.0f}")
        print(f"      üåç –ì–æ—Ä–æ–¥–æ–≤: {diversity_stats.loc[segment, 'unique_cities']:.0f}")

def show_business_recommendations(recommendations):
    """–ü–æ–∫–∞–∑ –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    print_header("–ë–ò–ó–ù–ï–°-–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    
    for segment_name, rec_data in recommendations.items():
        print(f"\nüéØ {segment_name}")
        print(f"   üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec_data['priority']}")
        print(f"   üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {rec_data['strategy']}")
        
        print("   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for i, recommendation in enumerate(rec_data['recommendations'], 1):
            print(f"      {i}. {recommendation}")
        
        if 'kpis' in rec_data:
            print("   üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
            for kpi, value in rec_data['kpis'].items():
                print(f"      ‚Ä¢ {kpi}: {value}")

def show_model_quality():
    """–ü–æ–∫–∞–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"""
    print_header("–ö–ê–ß–ï–°–¢–í–û –ú–û–î–ï–õ–ò –ú–ê–®–ò–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    metadata_file = 'results/customer_segmentation_metadata.json'
    if os.path.exists(metadata_file):
        with open(metadata_file, 'r', encoding='utf-8') as f:
            metadata = json.load(f)
        
        print_section("–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
        
        if 'model_metrics' in metadata:
            metrics = metadata['model_metrics']
            print(f"   üéØ Silhouette Score: {metrics.get('silhouette_score', 'N/A')}")
            print(f"   üìä Calinski-Harabasz Index: {metrics.get('calinski_harabasz_score', 'N/A')}")
            print(f"   üìà Davies-Bouldin Index: {metrics.get('davies_bouldin_score', 'N/A')}")
        
        if 'dataset_info' in metadata:
            dataset = metadata['dataset_info']
            print_section("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ")
            print(f"   üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {dataset.get('total_clients', 'N/A'):,}")
            print(f"   üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {dataset.get('total_transactions', 'N/A'):,}")
            print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {dataset.get('date_range', 'N/A')}")
    else:
        print("‚ö†Ô∏è –§–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")

def show_files_created():
    """–ü–æ–∫–∞–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print_header("–°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´ –ò –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    
    results_dir = 'results'
    if not os.path.exists(results_dir):
        print("‚ùå –ü–∞–ø–∫–∞ results –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    files = os.listdir(results_dir)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø–∞–º
    file_groups = {
        '–î–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏': [f for f in files if f.endswith('.csv') and 'segment' in f],
        '–ü—Ä–æ—Ñ–∏–ª–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏': [f for f in files if f.endswith('.json')],
        '–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏': [f for f in files if f.endswith(('.png', '.html'))],
        '–û—Ç—á–µ—Ç—ã –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏': [f for f in files if f.endswith(('.pdf', '.pptx', '.md'))],
        '–°–ª–æ–≤–∞—Ä–∏ –¥–∞–Ω–Ω—ã—Ö': [f for f in files if 'dictionary' in f]
    }
    
    for group_name, group_files in file_groups.items():
        if group_files:
            print_section(group_name)
            for file in sorted(group_files):
                file_path = os.path.join(results_dir, file)
                file_size = os.path.getsize(file_path)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if file_size < 1024:
                    size_str = f"{file_size} B"
                elif file_size < 1024*1024:
                    size_str = f"{file_size/1024:.1f} KB"
                else:
                    size_str = f"{file_size/(1024*1024):.1f} MB"
                
                print(f"   üìÑ {file} ({size_str})")

def show_next_steps():
    """–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"""
    print_header("–°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò")
    
    print("üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    print("   1. üìä –ò–∑—É—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥: results/segment_dashboard.html")
    print("   2. üìã –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π: results/presentation_segmentation.pdf")
    print("   3. üìñ –ò–∑—É—á–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö: results/data_dictionary.xlsx")
    print("   4. üíº –í–Ω–µ–¥—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ results/business_recommendations.json")
    print("   5. üìà –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ results/monitoring_data.json")
    print("   6. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–µ A/B —Ç–µ—Å—Ç—ã –ø–æ –ø–ª–∞–Ω–∞–º –∏–∑ results/ab_test_plan.json")
    
    print("\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ results/client_segments.csv –¥–ª—è CRM —Å–∏—Å—Ç–µ–º—ã")
    print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏")
    print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
    
    print("\nüìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:")
    print("   ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md")
    print("   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –∫–æ–º–∞–Ω–¥–∞ Data Science")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üè¶ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò –ë–ê–ù–ö–û–í–°–ö–ò–• –ö–õ–ò–ï–ù–¢–û–í")
    print("=" * 70)
    print(f"üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df_segments, segment_profiles, recommendations, df_stats = load_segmentation_results()
    
    if df_segments is None:
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    show_segment_overview(df_segments, segment_profiles)
    show_financial_analysis(df_segments)
    show_behavioral_patterns(df_segments)
    show_business_recommendations(recommendations)
    show_model_quality()
    show_files_created()
    show_next_steps()
    
    print("\n" + "="*70)
    print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("="*70)

if __name__ == "__main__":
    main() 