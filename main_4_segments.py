#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å 4 —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
DECENTRATHON 3.0 | Mastercard Challenge | 2025

–¶–µ–ª—å: –°–æ–∑–¥–∞–Ω–∏–µ 4 —á–µ—Ç–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤:
1. üîÑ –û–±—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
2. üò¥ –°–ø—è—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã - –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ç—Ä–µ–±—É—é—Ç —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏  
3. üíé VIP –∫–ª–∏–µ–Ω—Ç—ã - –≤—ã—Å–æ–∫–∏–µ —Ç—Ä–∞—Ç—ã, –ø—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç
4. ‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ - –≤—ã—Å–æ–∫–∞—è –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')

from data_processor import DataProcessor
from clustering_models import ClusteringModels
from segment_analyzer import SegmentAnalyzer
from config import config

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å 4 —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò –ö–õ–ò–ï–ù–¢–û–í (4 –°–ï–ì–ú–ï–ù–¢–ê)")
    print("="*60)
    print("üéØ –¶–µ–ª—å: –°–æ–∑–¥–∞–Ω–∏–µ 4 —á–µ—Ç–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print("   üîÑ –û–±—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã")
    print("   üò¥ –°–ø—è—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã") 
    print("   üíé VIP –∫–ª–∏–µ–Ω—Ç—ã")
    print("   ‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏")
    print("="*60)
    
    try:
        # –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –≠–¢–ê–ü 1: –ó–ê–ì–†–£–ó–ö–ê –ò –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•")
        print("-" * 50)
        
        processor = DataProcessor(config.data.data_file)
        data_info = processor.explore_data()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {data_info['total_records']:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        print(f"   üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {data_info['unique_clients']:,}")
        print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {data_info['date_range']['start']} - {data_info['date_range']['end']}")
        
        # –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω–æ–≤—ã–º–∏ VIP –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏—á–µ—Å–∫–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        print("\nüõ†Ô∏è –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–• –ü–†–ò–ó–ù–ê–ö–û–í")
        print("-" * 50)
        
        client_features = processor.create_behavioral_features()
        
        # –≠–¢–ê–ü 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        print("\n‚öôÔ∏è –≠–¢–ê–ü 3: –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–ò")
        print("-" * 50)
        
        scaled_features, clean_indices = processor.prepare_features_for_clustering()
        
        # –≠–¢–ê–ü 4: –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º 4 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        print("\nü§ñ –≠–¢–ê–ü 4: –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í (4 –ö–õ–ê–°–¢–ï–†–ê)")
        print("-" * 50)
        
        clustering = ClusteringModels(scaled_features, config.features.clustering_features)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º 4 –∫–ª–∞—Å—Ç–µ—Ä–∞
        print(f"üéØ –°–æ–∑–¥–∞–µ–º —Ä–æ–≤–Ω–æ {config.model.target_clusters} –∫–ª–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —á–µ—Ç–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
        kmeans_result = clustering.fit_kmeans(n_clusters=config.model.target_clusters)
        
        print(f"\n‚úÖ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   üìä –°–∏–ª—É—ç—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {kmeans_result['metrics']['silhouette']:.3f}")
        print(f"   üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {kmeans_result['n_clusters']}")
        print(f"   üìà –ò–Ω–µ—Ä—Ü–∏—è: {kmeans_result['inertia']:,.0f}")
        
        # –≠–¢–ê–ü 5: –ê–Ω–∞–ª–∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        print("\nüìà –≠–¢–ê–ü 5: –ê–ù–ê–õ–ò–ó –°–ï–ì–ú–ï–ù–¢–û–í")
        print("-" * 50)
        
        analyzer = SegmentAnalyzer(
            client_features=client_features,
            cluster_labels=kmeans_result['labels'],
            scaled_features=scaled_features,
            clean_indices=clean_indices
        )
        
        segment_analysis = analyzer.analyze_segments()
        
        # –≠–¢–ê–ü 6: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
        print("\nüé® –≠–¢–ê–ü 6: –°–û–ó–î–ê–ù–ò–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ô")
        print("-" * 50)
        
        analyzer.create_comprehensive_visualizations()
        
        # –≠–¢–ê–ü 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print("\nüíº –≠–¢–ê–ü 7: –ì–ï–ù–ï–†–ê–¶–ò–Ø –ë–ò–ó–ù–ï–°-–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
        print("-" * 50)
        
        business_recommendations = analyzer.generate_business_recommendations()
        
        # –≠–¢–ê–ü 8: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\nüíæ –≠–¢–ê–ü 8: –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("-" * 50)
        
        analyzer.save_detailed_analysis()
        processor.save_feature_analysis()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        analyzer.analyze_segment_stability()
        analyzer.calculate_customer_lifetime_value()
        analyzer.analyze_customer_journey()
        analyzer.create_monitoring_dashboard_data()
        analyzer.design_ab_test_framework()
        
        # –≠–¢–ê–ü 9: –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
        print("\nüìã –≠–¢–ê–ü 9: –ò–¢–û–ì–û–í–û–ï –†–ï–ó–Æ–ú–ï")
        print("-" * 50)
        
        analyzer.print_executive_summary()
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö
        print("\nüéØ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–ì–ú–ï–ù–¢–ê–•:")
        print("="*60)
        
        for cluster_id, profile in segment_analysis.items():
            segment_type = profile['segment_type']
            print(f"\n{segment_type['emoji']} {segment_type['name']} (–ö–ª–∞—Å—Ç–µ—Ä {cluster_id}):")
            print(f"   üìä –†–∞–∑–º–µ—Ä: {profile['size']:,} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({profile['percentage']:.1f}%)")
            print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {segment_type['description']}")
            print(f"   ‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {segment_type['priority']}")
            print(f"   üí∞ –¶–µ–Ω–Ω–æ—Å—Ç—å: {segment_type['value']}")
            
            # –ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            chars = profile['characteristics']
            print(f"   üìà –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {chars['avg_transactions']:.0f}")
            print(f"   üíµ –°—Ä–µ–¥–Ω–∏–π –æ–±–æ—Ä–æ—Ç: {chars['avg_total_amount']:,.0f} ‚Ç∏")
            print(f"   üõí –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {chars['avg_amount']:,.0f} ‚Ç∏")
            print(f"   üè™ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ä—á–∞–Ω—Ç–æ–≤: {chars['avg_merchants']:.0f}")
        
        print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("="*60)
        print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'results/'")
        print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ 'results/segment_dashboard.html' –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        print("üìä –ë–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: 'results/business_recommendations.json'")
        print("üìà –ü—Ä–æ—Ñ–∏–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: 'results/segment_profiles.json'")
        
        return {
            'segments': segment_analysis,
            'recommendations': business_recommendations,
            'model_metrics': kmeans_result['metrics']
        }
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –í–´–ü–û–õ–ù–ï–ù–ò–ò –ê–ù–ê–õ–ò–ó–ê: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    print("üè¶ –°–ò–°–¢–ï–ú–ê –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò –ë–ê–ù–ö–û–í–°–ö–ò–• –ö–õ–ò–ï–ù–¢–û–í")
    print("üéØ –í–µ—Ä—Å–∏—è: 4 —Å–µ–≥–º–µ–Ω—Ç–∞ (–û–±—ã—á–Ω—ã–µ, –°–ø—è—â–∏–µ, VIP, –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏)")
    print("üèÜ DECENTRATHON 3.0 | Mastercard Challenge | 2025")
    print()
    
    results = main()
    
    if results:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("üí° –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python demo.py")
    else:
        print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏") 